Que: When would you want to use a remote repository rather than keeping all your
work local?

Ans:
	1. When sharing my work with others which later can collaboratively modified.
	2. When teaming up with certain people who share common interests.
	3. When improving my work with the help of others.
	4. When merging some part of code of some feature that someone worked elsewhere
	with my code that is altogether different.

Que: Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

Ans: When we pull a branch, the parent commit of remote branch is joined to the
tip of the local branch and the tip of the local branch is updated to the tip of
the remote branch (in local repository).
We pull a branch from a remote repository that we may be interested to
contribute. Since we pull remote branches that we wish to continue working with,
if git is automated to stay up-to-date with a remote repository, the chances are
that git may pull all branches and update our local repository with all unwanted
branches that we may not use or work with. That way, manually pulling the changes
is very reasonable.

Que: Describe the differences between forks, clones, and branches. When would
you use one instead of another?

Ans: Fork is used to copy an entire repository from one github user's account 
to another user's github account. Clone is used to copy a git repository from a
remote location to a local computer or to make more than one copy in local
computer. Branch is used to name a commit that branches out from the parent
branch. The name given to the new branch is updated always to point to the tip of
the branch everytime the branch gets a new commit.

I use fork when I need to experiment on someone else's repository but don't have
permission to push my local changes to the remote repository.
I use clone when I have to copy a remote repository to my local computer or to
make different copies of a local repository.
I use branching when I have to work on a new featrue or for I18N that I'm not yet
sure if it works fine or fits with my production line code properly.

Que: What is the benefit of having a copy of the last known state of the remote stored locally?

Ans: We can get a copy of the last known state of the remote repository to our
local repository using the command "git fetch origin" where 'origin' refers to
the remote repository locally. Then, "origin/Head" is set to the tip of
"origin/master" that is recently copied from the remote repository.
That implies, tip of the remote repository and "origin/HEAD" point to the same
commit. The merge of "origin/HEAD" to the tip of the local master branch
doesn't happen when we fetch. And, directly pulling the remote repository's
latest states may cause conflicts. Remember, "pull = fetch + merge".
So, first fetching, then analysing and resolving any conflicts that may arise
and then merging is the best way. That way, 'fetch' is beneficial.

Que: How would you collaborate without using Git or GitHub? What would be
easier, and what would be harder?

Ans: There are other version control solutions like Perforce, SVN, CVN, etc.
None of them are distributed version control systems like git. Using one of
them, we may collaborate with others. If not these, we can use less
sophisticated Google Docs. Without one of these tools, we just have to sit
together and work, but, not with the luxury of working remotely.
Using Git and GitHub is easier but learing how to use takes a little effort.
Sitting together and working is a good collaborative solution for smaller
projects but as the scope of the project grows, the collaboration becomes
tedious and hence it is harder. Moreover, we can't work remotely too.

Que: When would you want to make changes in a separate branch rather than
directly in master? What benefits does each approach have?

Ans: I have to make changes in a separate branch when I'm working on a
collaborative project where a lot of other are involved and I can't
directly push my changes to the remote master branch. I have to create
pull request and my changes are to be reviewed by all others involved in
the project. If I've added others to my venture and I'm the decision maker,
then I can directly push my changes to the master branch.
Pushing directly to the master branch is easy but it doesn't let others review
your recommendations and it is wrong in a collaborative project.
Pushing through a separate branch is the right way of submitting changes
as all others are involved to share their opinion, this way.