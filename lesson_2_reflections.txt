Que: What happens when you initialize a repository? Why do you need to do it?

Ans: We initialize a repository using the command "git init". When we initialize a repository, a directory with "git" extension is created in the current directory (.git) and '.git' is a hidden directory.

We need to initialize a repository in order to bring it under git version controlling. All the files that need version controlling in a project is added into this repository.

Que: How is the staging area different from the working directory and the repository? What value do you think it offers?

Ans: A repository is a directory (.git directory) that has all the metadata of the git project that is being version controlled. This is the directory that is being copied from a remote computer to a local computer when we clone.
A working directory is where we introduce our modifications to the files included in our project. It will, at any time, have single checkout of one version of the project.
A staging area may be a file or some sort of buffer in the repository that may hold all the files that we add to it, to be committed to the repository in our next commit.

At any time, there will be three different types of files available locally.
One, modified files, two, staged files and three, committed files.
Suppose a user clones a git project. He now has the git project up to the latest git commit, as of then. After some time he modifies a file (This happens in his local workspace - local working directory). As the modification is in local working directory, it is not available to some other user working remotely. Now this user might not be sure if whatever modifications he made are right. He stages the modified file to the staging area and thinks to look for a second opinion from one of his friends. Now there are two possibilities:
a. User's friend asks to go ahead with the modifications:
	Then the user commits the modification to the local git repository. He may, later host it someplace from where another remote user may clone this git project upto this user's recent commit.
b.	User's friend asks to discard the modifications as it is irrelevent:
	Then user unstages the already staged file and as he hasn't yet committed it, he can freash start again from scratch and do relevent modifications.
The distinction between modified, staged and commited files certainly offer many advantages.

Que: How can you use the staging area to make sure you have one commit per logical change?

Ans: Most of the times, we kind of seclude a part of code that does/relates to one functionality from the rest in a separate file, e.g., all helper methods put into a separate helper class, all classes related to one module is organised into one file, a main class, etc.
Using "git status", "git diff", "git diff --staged" and "git diff commit-id1 commit-id2", we can check the status and the differences of files before each commit in working directory, staging area and the previous commit.
If there are more than one files present that is untracked, modified or about to be committed, then that is an indication that we are about to commit more than one logical change at a time. If that is the case, we can unstage all the files from the staging area except one and commit, stage and commit all the other files that are logically separate.
Staging area acts as an intermediary between actual working directory and local repositary.

Que: What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Ans: 1. When experimenting on code and not beiig sure if the code really works.
	 2. When introducing newer features such as Internationalisation and Localisation.
	 3. When using the same base code to introduce different features that are separate from one another.
	 Branches certainly help by introducing fair distinction between one set of program files with the other.

Que: How do the diagrams help you visualize the branch structure?

Ans: If a commit is in a particular branch, using diagrams, we can easily trace from the latest commit in the branch to the root commit that has no other parent commit. That way, if there are any unreachable commits that are streched out from any of the intermediary commits, without branching, we can easily identify (which all commits are reachable and which all commits aren't) them.

Que: 